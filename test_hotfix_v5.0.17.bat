@echo off
echo ========================================
echo TESTING HOTFIX V5.0.17 - PRECIO DOLAR CONSISTENTE
echo ========================================
echo.

echo üîç Verificando correcciones del precio del d√≥lar...
echo.

REM Test 1: Verificar que dollarPriceManager usa precio de venta correctamente
echo ‚úÖ Test 1: Verificaci√≥n de precio de venta en dollarPriceManager
findstr /C:"venta: manualPrice" "src\background\dollarPriceManager.js" >nul
if %errorlevel%==0 (
    echo    ‚úì DollarPriceManager usa precio de venta correctamente
) else (
    echo    ‚ùå ERROR: DollarPriceManager no usa precio de venta
)
echo.

REM Test 2: Verificar comentario sobre precio de VENTA
echo ‚úÖ Test 2: Verificaci√≥n de comentario sobre precio de VENTA
findstr /C:"VENTA" "src\background\dollarPriceManager.js" >nul
if %errorlevel%==0 (
    echo    ‚úì Comentario sobre precio de VENTA presente
) else (
    echo    ‚ùå ERROR: Comentario sobre precio de VENTA no encontrado
)
echo.

REM Test 3: Verificar que popup muestra officialData.venta
echo ‚úÖ Test 3: Verificaci√≥n de mostrar precio de venta en popup
findstr /C:"officialData.venta" "src\popup.js" >nul
if %errorlevel%==0 (
    echo    ‚úì Popup muestra precio de venta correctamente
) else (
    echo    ‚ùå ERROR: Popup no muestra precio de venta
)
echo.

REM Test 4: Verificar que se a√±adi√≥ m√©todo invalidateCache
echo ‚úÖ Test 4: Verificaci√≥n de m√©todo invalidateCache
findstr /C:"invalidateCache()" "src\background\dollarPriceManager.js" >nul
if %errorlevel%==0 (
    echo    ‚úì M√©todo invalidateCache presente
) else (
    echo    ‚ùå ERROR: M√©todo invalidateCache no encontrado
)
echo.

REM Test 5: Verificar que main.js llama invalidateCache
echo ‚úÖ Test 5: Verificaci√≥n de llamada a invalidateCache en main.js
findstr /C:"dollarPriceManager.invalidateCache" "src\background\main.js" >nul
if %errorlevel%==0 (
    echo    ‚úì Main.js llama invalidateCache correctamente
) else (
    echo    ‚ùå ERROR: Main.js no llama invalidateCache
)
echo.

REM Test 6: Verificar log con precio de VENTA
echo ‚úÖ Test 6: Verificaci√≥n de log con precio de VENTA
findstr /C:"VENTA:" "src\background\dollarPriceManager.js" >nul
if %errorlevel%==0 (
    echo    ‚úì Log con precio de VENTA presente
) else (
    echo    ‚ùå ERROR: Log con precio de VENTA no encontrado
)
echo.

REM Test 7: Verificar timeout en getDollarPrice
echo ‚úÖ Test 7: Verificaci√≥n de timeout en getDollarPrice
findstr /C:"getDollarPriceWithTimeout" "src\background\main.js" >nul
if %errorlevel%==0 (
    echo    ‚úì Timeout para getDollarPrice implementado
) else (
    echo    ‚ùå ERROR: Timeout para getDollarPrice no encontrado
)
echo.

REM Test 8: Verificar timeout en fetchDolaritoBankRates
echo ‚úÖ Test 8: Verificaci√≥n de timeout en fetchDolaritoBankRates
findstr /C:"Timeout fetchDolaritoBankRates" "src\background\dollarPriceManager.js" >nul
if %errorlevel%==0 (
    echo    ‚úì Timeout para fetchDolaritoBankRates implementado
) else (
    echo    ‚ùå ERROR: Timeout para fetchDolaritoBankRates no encontrado
)
echo.

echo ========================================
echo TESTING COMPLETADO
echo ========================================
echo.
echo üìù Pasos de testing manual:
echo    1. Configurar precio manual del d√≥lar: $1460
echo    2. Verificar que en "Fuente" aparezca: $1.460
echo    3. Verificar que en el primer paso aparezca: $1.460,00/USD
echo    4. Ambos valores deben ser exactamente iguales
echo    5. NO deben aparecer errores de timeout en console
echo.
echo üí° Concepto clave:
echo    - El usuario configura el PRECIO DE VENTA del d√≥lar ($1460)
echo    - Este es lo que cuesta comprar 1 USD
echo    - Se usa en todos los c√°lculos de arbitraje
echo.
pause